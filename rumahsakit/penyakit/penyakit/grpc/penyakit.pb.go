// Code generated by protoc-gen-go. DO NOT EDIT.
// source: penyakit.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	penyakit.proto

It has these top-level messages:
	AddPenyakitReq
	ReadPenyakitByKodeReq
	ReadPenyakitByKeteranganReq
	ReadPenyakitByKodeResp
	ReadPenyakitByKeteranganResp
	ReadPenyakitResp
	UpdatePenyakitReq
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddPenyakitReq struct {
	KodePenyakit string `protobuf:"bytes,1,opt,name=kodePenyakit" json:"kodePenyakit,omitempty"`
	NamaPenyakit string `protobuf:"bytes,2,opt,name=namaPenyakit" json:"namaPenyakit,omitempty"`
	Deskripsi    string `protobuf:"bytes,3,opt,name=deskripsi" json:"deskripsi,omitempty"`
	Status       int32  `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
}

func (m *AddPenyakitReq) Reset()                    { *m = AddPenyakitReq{} }
func (m *AddPenyakitReq) String() string            { return proto.CompactTextString(m) }
func (*AddPenyakitReq) ProtoMessage()               {}
func (*AddPenyakitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddPenyakitReq) GetKodePenyakit() string {
	if m != nil {
		return m.KodePenyakit
	}
	return ""
}

func (m *AddPenyakitReq) GetNamaPenyakit() string {
	if m != nil {
		return m.NamaPenyakit
	}
	return ""
}

func (m *AddPenyakitReq) GetDeskripsi() string {
	if m != nil {
		return m.Deskripsi
	}
	return ""
}

func (m *AddPenyakitReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// request adalah yang datang lalu ditampung
type ReadPenyakitByKodeReq struct {
	Kode string `protobuf:"bytes,1,opt,name=kode" json:"kode,omitempty"`
}

func (m *ReadPenyakitByKodeReq) Reset()                    { *m = ReadPenyakitByKodeReq{} }
func (m *ReadPenyakitByKodeReq) String() string            { return proto.CompactTextString(m) }
func (*ReadPenyakitByKodeReq) ProtoMessage()               {}
func (*ReadPenyakitByKodeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadPenyakitByKodeReq) GetKode() string {
	if m != nil {
		return m.Kode
	}
	return ""
}

type ReadPenyakitByKeteranganReq struct {
	Keterangan string `protobuf:"bytes,1,opt,name=keterangan" json:"keterangan,omitempty"`
}

func (m *ReadPenyakitByKeteranganReq) Reset()                    { *m = ReadPenyakitByKeteranganReq{} }
func (m *ReadPenyakitByKeteranganReq) String() string            { return proto.CompactTextString(m) }
func (*ReadPenyakitByKeteranganReq) ProtoMessage()               {}
func (*ReadPenyakitByKeteranganReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadPenyakitByKeteranganReq) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

// request adalah sesuatu yang return yang akan dikembalikan biasanya ada request dan respon
type ReadPenyakitByKodeResp struct {
	KodePenyakit string `protobuf:"bytes,1,opt,name=kodePenyakit" json:"kodePenyakit,omitempty"`
	NamaPenyakit string `protobuf:"bytes,2,opt,name=namaPenyakit" json:"namaPenyakit,omitempty"`
	Deskripsi    string `protobuf:"bytes,3,opt,name=deskripsi" json:"deskripsi,omitempty"`
	Status       int32  `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	Keterangan   string `protobuf:"bytes,5,opt,name=keterangan" json:"keterangan,omitempty"`
}

func (m *ReadPenyakitByKodeResp) Reset()                    { *m = ReadPenyakitByKodeResp{} }
func (m *ReadPenyakitByKodeResp) String() string            { return proto.CompactTextString(m) }
func (*ReadPenyakitByKodeResp) ProtoMessage()               {}
func (*ReadPenyakitByKodeResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadPenyakitByKodeResp) GetKodePenyakit() string {
	if m != nil {
		return m.KodePenyakit
	}
	return ""
}

func (m *ReadPenyakitByKodeResp) GetNamaPenyakit() string {
	if m != nil {
		return m.NamaPenyakit
	}
	return ""
}

func (m *ReadPenyakitByKodeResp) GetDeskripsi() string {
	if m != nil {
		return m.Deskripsi
	}
	return ""
}

func (m *ReadPenyakitByKodeResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReadPenyakitByKodeResp) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

type ReadPenyakitByKeteranganResp struct {
	AllKeterangan []*ReadPenyakitByKodeResp `protobuf:"bytes,1,rep,name=allKeterangan" json:"allKeterangan,omitempty"`
}

func (m *ReadPenyakitByKeteranganResp) Reset()                    { *m = ReadPenyakitByKeteranganResp{} }
func (m *ReadPenyakitByKeteranganResp) String() string            { return proto.CompactTextString(m) }
func (*ReadPenyakitByKeteranganResp) ProtoMessage()               {}
func (*ReadPenyakitByKeteranganResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadPenyakitByKeteranganResp) GetAllKeterangan() []*ReadPenyakitByKodeResp {
	if m != nil {
		return m.AllKeterangan
	}
	return nil
}

type ReadPenyakitResp struct {
	// repeated itu sama kayak menulis ulang
	Allkode []*ReadPenyakitByKodeResp `protobuf:"bytes,1,rep,name=allkode" json:"allkode,omitempty"`
}

func (m *ReadPenyakitResp) Reset()                    { *m = ReadPenyakitResp{} }
func (m *ReadPenyakitResp) String() string            { return proto.CompactTextString(m) }
func (*ReadPenyakitResp) ProtoMessage()               {}
func (*ReadPenyakitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadPenyakitResp) GetAllkode() []*ReadPenyakitByKodeResp {
	if m != nil {
		return m.Allkode
	}
	return nil
}

type UpdatePenyakitReq struct {
	KodePenyakit string `protobuf:"bytes,1,opt,name=kodePenyakit" json:"kodePenyakit,omitempty"`
	NamaPenyakit string `protobuf:"bytes,2,opt,name=namaPenyakit" json:"namaPenyakit,omitempty"`
	Deskripsi    string `protobuf:"bytes,3,opt,name=deskripsi" json:"deskripsi,omitempty"`
	Status       int32  `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	Keterangan   string `protobuf:"bytes,5,opt,name=keterangan" json:"keterangan,omitempty"`
}

func (m *UpdatePenyakitReq) Reset()                    { *m = UpdatePenyakitReq{} }
func (m *UpdatePenyakitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePenyakitReq) ProtoMessage()               {}
func (*UpdatePenyakitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdatePenyakitReq) GetKodePenyakit() string {
	if m != nil {
		return m.KodePenyakit
	}
	return ""
}

func (m *UpdatePenyakitReq) GetNamaPenyakit() string {
	if m != nil {
		return m.NamaPenyakit
	}
	return ""
}

func (m *UpdatePenyakitReq) GetDeskripsi() string {
	if m != nil {
		return m.Deskripsi
	}
	return ""
}

func (m *UpdatePenyakitReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdatePenyakitReq) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

func init() {
	proto.RegisterType((*AddPenyakitReq)(nil), "grpc.AddPenyakitReq")
	proto.RegisterType((*ReadPenyakitByKodeReq)(nil), "grpc.ReadPenyakitByKodeReq")
	proto.RegisterType((*ReadPenyakitByKeteranganReq)(nil), "grpc.ReadPenyakitByKeteranganReq")
	proto.RegisterType((*ReadPenyakitByKodeResp)(nil), "grpc.ReadPenyakitByKodeResp")
	proto.RegisterType((*ReadPenyakitByKeteranganResp)(nil), "grpc.ReadPenyakitByKeteranganResp")
	proto.RegisterType((*ReadPenyakitResp)(nil), "grpc.ReadPenyakitResp")
	proto.RegisterType((*UpdatePenyakitReq)(nil), "grpc.UpdatePenyakitReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for PenyakitService service

type PenyakitServiceClient interface {
	AddPenyakit(ctx context.Context, in *AddPenyakitReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	ReadPenyakitByKode(ctx context.Context, in *ReadPenyakitByKodeReq, opts ...grpc1.CallOption) (*ReadPenyakitByKodeResp, error)
	ReadPenyakit(ctx context.Context, in *google_protobuf.Empty, opts ...grpc1.CallOption) (*ReadPenyakitResp, error)
	UpdatePenyakit(ctx context.Context, in *UpdatePenyakitReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	ReadPenyakitByKeterangan(ctx context.Context, in *ReadPenyakitByKeteranganReq, opts ...grpc1.CallOption) (*ReadPenyakitByKeteranganResp, error)
}

type penyakitServiceClient struct {
	cc *grpc1.ClientConn
}

func NewPenyakitServiceClient(cc *grpc1.ClientConn) PenyakitServiceClient {
	return &penyakitServiceClient{cc}
}

func (c *penyakitServiceClient) AddPenyakit(ctx context.Context, in *AddPenyakitReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.PenyakitService/AddPenyakit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penyakitServiceClient) ReadPenyakitByKode(ctx context.Context, in *ReadPenyakitByKodeReq, opts ...grpc1.CallOption) (*ReadPenyakitByKodeResp, error) {
	out := new(ReadPenyakitByKodeResp)
	err := grpc1.Invoke(ctx, "/grpc.PenyakitService/ReadPenyakitByKode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penyakitServiceClient) ReadPenyakit(ctx context.Context, in *google_protobuf.Empty, opts ...grpc1.CallOption) (*ReadPenyakitResp, error) {
	out := new(ReadPenyakitResp)
	err := grpc1.Invoke(ctx, "/grpc.PenyakitService/ReadPenyakit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penyakitServiceClient) UpdatePenyakit(ctx context.Context, in *UpdatePenyakitReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.PenyakitService/UpdatePenyakit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penyakitServiceClient) ReadPenyakitByKeterangan(ctx context.Context, in *ReadPenyakitByKeteranganReq, opts ...grpc1.CallOption) (*ReadPenyakitByKeteranganResp, error) {
	out := new(ReadPenyakitByKeteranganResp)
	err := grpc1.Invoke(ctx, "/grpc.PenyakitService/ReadPenyakitByKeterangan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PenyakitService service

type PenyakitServiceServer interface {
	AddPenyakit(context.Context, *AddPenyakitReq) (*google_protobuf.Empty, error)
	ReadPenyakitByKode(context.Context, *ReadPenyakitByKodeReq) (*ReadPenyakitByKodeResp, error)
	ReadPenyakit(context.Context, *google_protobuf.Empty) (*ReadPenyakitResp, error)
	UpdatePenyakit(context.Context, *UpdatePenyakitReq) (*google_protobuf.Empty, error)
	ReadPenyakitByKeterangan(context.Context, *ReadPenyakitByKeteranganReq) (*ReadPenyakitByKeteranganResp, error)
}

func RegisterPenyakitServiceServer(s *grpc1.Server, srv PenyakitServiceServer) {
	s.RegisterService(&_PenyakitService_serviceDesc, srv)
}

func _PenyakitService_AddPenyakit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPenyakitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenyakitServiceServer).AddPenyakit(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PenyakitService/AddPenyakit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenyakitServiceServer).AddPenyakit(ctx, req.(*AddPenyakitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenyakitService_ReadPenyakitByKode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPenyakitByKodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenyakitServiceServer).ReadPenyakitByKode(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PenyakitService/ReadPenyakitByKode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenyakitServiceServer).ReadPenyakitByKode(ctx, req.(*ReadPenyakitByKodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenyakitService_ReadPenyakit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenyakitServiceServer).ReadPenyakit(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PenyakitService/ReadPenyakit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenyakitServiceServer).ReadPenyakit(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenyakitService_UpdatePenyakit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePenyakitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenyakitServiceServer).UpdatePenyakit(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PenyakitService/UpdatePenyakit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenyakitServiceServer).UpdatePenyakit(ctx, req.(*UpdatePenyakitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenyakitService_ReadPenyakitByKeterangan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPenyakitByKeteranganReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenyakitServiceServer).ReadPenyakitByKeterangan(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PenyakitService/ReadPenyakitByKeterangan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenyakitServiceServer).ReadPenyakitByKeterangan(ctx, req.(*ReadPenyakitByKeteranganReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PenyakitService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.PenyakitService",
	HandlerType: (*PenyakitServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "AddPenyakit",
			Handler:    _PenyakitService_AddPenyakit_Handler,
		},
		{
			MethodName: "ReadPenyakitByKode",
			Handler:    _PenyakitService_ReadPenyakitByKode_Handler,
		},
		{
			MethodName: "ReadPenyakit",
			Handler:    _PenyakitService_ReadPenyakit_Handler,
		},
		{
			MethodName: "UpdatePenyakit",
			Handler:    _PenyakitService_UpdatePenyakit_Handler,
		},
		{
			MethodName: "ReadPenyakitByKeterangan",
			Handler:    _PenyakitService_ReadPenyakitByKeterangan_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "penyakit.proto",
}

func init() { proto.RegisterFile("penyakit.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x4d, 0x4f, 0xea, 0x40,
	0x14, 0xa5, 0x8f, 0x8f, 0x17, 0x2e, 0x3c, 0xde, 0x7b, 0x37, 0x8a, 0x4d, 0x21, 0x06, 0x67, 0x45,
	0x62, 0x52, 0x12, 0x4c, 0xdc, 0x91, 0x28, 0xc6, 0x8d, 0x6c, 0xb4, 0xc6, 0x1f, 0x30, 0xd0, 0xb1,
	0x69, 0x5a, 0xda, 0xa1, 0x2d, 0x26, 0xfc, 0x09, 0xfd, 0x2d, 0x6e, 0xfc, 0x7d, 0x66, 0xfa, 0x81,
	0x53, 0xa0, 0xb0, 0xd4, 0x1d, 0x9c, 0x9e, 0x7b, 0xef, 0x39, 0x77, 0xee, 0x81, 0x16, 0x67, 0xde,
	0x8a, 0x3a, 0x76, 0xa4, 0xf3, 0xc0, 0x8f, 0x7c, 0xac, 0x58, 0x01, 0x9f, 0x69, 0x1d, 0xcb, 0xf7,
	0x2d, 0x97, 0x0d, 0x62, 0x6c, 0xba, 0x7c, 0x1e, 0xb0, 0x39, 0x8f, 0x56, 0x09, 0x85, 0xbc, 0x2a,
	0xd0, 0xba, 0x36, 0xcd, 0xfb, 0xb4, 0xd0, 0x60, 0x0b, 0x24, 0xd0, 0x74, 0x7c, 0x93, 0x65, 0x90,
	0xaa, 0xf4, 0x94, 0x7e, 0xdd, 0xc8, 0x61, 0x82, 0xe3, 0xd1, 0x39, 0x5d, 0x73, 0x7e, 0x25, 0x1c,
	0x19, 0xc3, 0x2e, 0xd4, 0x4d, 0x16, 0x3a, 0x81, 0xcd, 0x43, 0x5b, 0x2d, 0xc7, 0x84, 0x2f, 0x00,
	0xdb, 0x50, 0x0b, 0x23, 0x1a, 0x2d, 0x43, 0xb5, 0xd2, 0x53, 0xfa, 0x55, 0x23, 0xfd, 0x47, 0xce,
	0xe1, 0xd8, 0x60, 0x74, 0x2d, 0x68, 0xbc, 0x9a, 0xf8, 0x26, 0x13, 0xb2, 0x10, 0x2a, 0x42, 0x42,
	0x2a, 0x27, 0xfe, 0x4d, 0x46, 0xd0, 0xd9, 0x20, 0xb3, 0x88, 0x05, 0xd4, 0xb3, 0xa8, 0x27, 0x4a,
	0x4e, 0x01, 0x9c, 0x35, 0x90, 0x16, 0x4a, 0x08, 0xf9, 0x50, 0xa0, 0xbd, 0x6b, 0x58, 0xc8, 0xbf,
	0x77, 0x09, 0x1b, 0xc2, 0xab, 0x5b, 0xc2, 0xa7, 0xd0, 0x2d, 0xf6, 0x1d, 0x72, 0x1c, 0xc3, 0x1f,
	0xea, 0xba, 0x13, 0xd9, 0x7b, 0xb9, 0xdf, 0x18, 0x76, 0x75, 0x71, 0x10, 0xfa, 0x6e, 0xcb, 0x46,
	0xbe, 0x84, 0xdc, 0xc1, 0x3f, 0x99, 0x18, 0xf7, 0xbd, 0x84, 0xdf, 0xd4, 0x75, 0xd3, 0x67, 0x38,
	0xdc, 0x31, 0x23, 0x93, 0x77, 0x05, 0xfe, 0x3f, 0x71, 0x93, 0x46, 0xec, 0xc7, 0x1c, 0xda, 0xa1,
	0x1d, 0x0f, 0xdf, 0xca, 0xf0, 0x37, 0x1b, 0xf1, 0xc8, 0x82, 0x17, 0x7b, 0xc6, 0x70, 0x04, 0x0d,
	0x29, 0x2c, 0x78, 0x94, 0xb8, 0xcf, 0xe7, 0x47, 0x6b, 0xeb, 0x49, 0xe0, 0xf4, 0x2c, 0x70, 0xfa,
	0xad, 0x08, 0x1c, 0x29, 0xe1, 0x03, 0xe0, 0xf6, 0xa6, 0xb0, 0x53, 0xbc, 0xc3, 0x85, 0xb6, 0x77,
	0xc1, 0xa4, 0x84, 0x57, 0xd0, 0x94, 0xbf, 0x61, 0xc1, 0x70, 0x21, 0x6a, 0xb3, 0x4f, 0xda, 0xe1,
	0x06, 0x5a, 0xf9, 0xa7, 0xc1, 0x93, 0x84, 0xbb, 0xf5, 0x60, 0x7b, 0x9c, 0xcd, 0x40, 0x2d, 0x3a,
	0x48, 0x3c, 0xdb, 0x69, 0x41, 0x0e, 0xaa, 0x46, 0x0e, 0x51, 0x84, 0xd2, 0x69, 0x2d, 0x1e, 0x7b,
	0xf1, 0x19, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xbc, 0xc0, 0x27, 0xe7, 0x04, 0x00, 0x00,
}
